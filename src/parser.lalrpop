use std::str::FromStr;
use crate::syntax::{FunDecl, SurfProg, SurfFunDecl, Exp, Prim1, Prim2, SnakeType};
use crate::span::Span1;

grammar;

pub Prog: SurfProg<Span1> = Exp;

FUNDEFS: Exp<Span1> = {
  <l: @L> <funs: (FunDecl "and")*> <last: FunDecl> "in" <body: Boxed<Exp>> <r: @R> => {
    let mut decls: Vec<SurfFunDecl<Span1>> = funs.into_iter().map(|(decl, _)| decl).collect();
    decls.push(last);
    Exp::FunDefs { decls, body, ann: Span1 { start_ix: l, end_ix: r} }
  }
}

Boxed<T>: Box<T> = {
  <t: T> => Box::new(t)
}

Params: Vec<String> = Comma<Id>;

FunDecl: SurfFunDecl<Span1> = {
  <l: @L> "def" <name: Id> "(" <parameters: Params> ")" ":" <body: Exp> <r: @R> =>
    FunDecl { name, parameters, body, ann: Span1 { start_ix: l, end_ix: r}  }
}

Exp: Exp<Span1> = {
  IF,
  LET,
  FUNDEFS,
  SEQ,
  TYPEDECL,
  MATCHDECL,
}

TYPEDECL: Exp<Span1> = {
  <l: @L> "type" <decls: TypeDefs> "in" <body: Boxed<Exp>> <r: @R> => 
    Exp::TypeDefs { decls, body, ann: Span1 { start_ix: l, end_ix: r } },
}

MATCHDECL: Exp<Span1> = {
  <l: @L> "match" <expr: Boxed<Exp>> "default" <default: Boxed<Exp>> ":" <arms: CaseDecls> "end" <r: @R> =>
    Exp::Match { expr, default, arms, ann: Span1 { start_ix: l, end_ix: r } },
}

IF: Exp<Span1> = {
  <l: @L> "if" <cond: Boxed<Exp>> ":" <thn: Boxed<Exp>> "else" ":" <els: Boxed<Exp>> <r: @R> =>
    Exp::If { cond, thn, els, ann: Span1 { start_ix: l, end_ix: r }},
}

LET: Exp<Span1> = {
  <l: @L> "let" <bindings: Bindings> "in" <body: Boxed<Exp>> <r: @R> => Exp::Let { bindings, body, ann: Span1 { start_ix: l, end_ix: r }},
}

SEQ: Exp<Span1> = {
  <l: @L> <e1: BinOps> ";" <e2: Exp> <r: @R> =>
    Exp::Semicolon { e1: Box::new(e1), e2: Box::new(e2), ann: Span1 { start_ix: l, end_ix: r } },
  BinOps
}

LAssoc<Op, Next>: Exp<Span1> = {
  <l: @L> <e1: Boxed<LAssoc<Op,Next>>> <op: Op> <e2: Boxed<Next>> <r: @R> => Exp::Prim2(op, e1, e2, Span1 { start_ix: l, end_ix: r }),
  Next
}

RAssoc<Op, Next>: Exp<Span1> = {
  <l: @L> <e1: Boxed<Next>> <op: Op> <e2: Boxed<RAssoc<Op, Next>>> <r: @R> => Exp::Prim2(op, e1, e2, Span1 { start_ix: l, end_ix: r }),
  Next
}

BinOps = LogExp;
LogExp = RAssoc<Log, CmpExp>;
CmpExp = LAssoc<Cmp, Sum>;
Sum = LAssoc<PlusMinus, Product>;
Product = LAssoc<Times, NotExp>;

PlusMinus: Prim2 = {
  "+" => Prim2::Add,
  "-" => Prim2::Sub,
}

Times: Prim2 = {
  "*" => Prim2::Mul
}

Log: Prim2 = {
  "&&" => Prim2::And,
  "||" => Prim2::Or,
}

Cmp: Prim2 = {
  "<" => Prim2::Lt,
  "<=" => Prim2::Le,
  ">" => Prim2::Gt,
  ">=" => Prim2::Ge,
  "==" => Prim2::Eq,
  "!=" => Prim2::Neq,
}

NotExp: Exp<Span1> = {
  <l: @L> "!" <e: Boxed<BaseExp>> <r: @R> => Exp::Prim1(Prim1::Not, e, Span1 { start_ix: l, end_ix: r }),
  ArrExp
}

ArrExp: Exp<Span1> = {
  BaseExp,
  <l:@L> <a: Boxed<ArrExp>> "[" <e: Boxed<Exp>> "]" <r:@R> => Exp::Prim2(Prim2::ArrayGet, a, e, Span1 { start_ix: l, end_ix: r }),
  <l:@L> <array: Boxed<ArrExp>> "[" <index: Boxed<Exp>> "]" ":=" <new_value: Boxed<BaseExp>> <r:@R> => Exp::ArraySet{ ann: Span1 { start_ix: l, end_ix: r }, array, index, new_value }
}

BaseExp: Exp<Span1> = {
  <l: @L> <x: Id> <r: @R> => Exp::Var(x, Span1 { start_ix: l, end_ix: r }),
  <l: @L> <b: Bool> <r: @R> => Exp::Bool(b, Span1 { start_ix: l, end_ix: r }),
  <l: @L> <n: Num> <r:@R> => Exp::Num(n, Span1 { start_ix: l, end_ix: r }),
  <l:@L> <p:Prim1> "(" <e: Boxed<Exp>> ")" <r:@R> => Exp::Prim1(p, e, Span1 { start_ix: l, end_ix: r }),
  "(" <e: Exp> ")" => e,
  <l: @L> <x: Boxed<BaseExp>> "(" <es: Comma<Exp> > ")" <r: @R> => Exp::Call(x, es, Span1 { start_ix: l, end_ix: r }),
  <l: @L> LAMBDA <parameters: Params> ":" <body: Boxed<Exp>> "end" <r: @R>  => Exp::Lambda { parameters, body, ann: Span1 { start_ix: l, end_ix: r } },
  <l:@L> "[" <es: Comma<Exp>> "]" <r:@R> => Exp::Array(es, Span1 { start_ix: l, end_ix: r }),
}

LAMBDA: () = {
  "lambda",
  "Î»",
}

Comma<T>: Vec<T> = {
  <mut v: (<T> ",")*> <last: T?> => {
    match last {
      None => { },
      Some(t) => { v.push(t); }
    };
    v
  }
}

Prim1: Prim1 = {
  "add1" => Prim1::Add1,
  "sub1" => Prim1::Sub1,
  "print" => Prim1::Print,
  "isnum" => Prim1::IsNum,
  "isbool" => Prim1::IsBool,
  "isarray" => Prim1::IsArray,
  "length" => Prim1::Length,
  "isfun" => Prim1::IsFun,
}

Array<T>: Vec<T> = {
  "[" <ts: Comma<T>> "]" => ts
}

TypeDefs: Vec<(String, Vec<String>)> = {
  <type_exp: TypeExp> => vec![type_exp],
  <mut type_exps: TypeDefs> "," <type_exp: TypeExp> => {
    type_exps.push(type_exp);
    type_exps
  }
}

CaseDecls: Vec<(SnakeType, Vec<String>, Exp<Span1>)> = {
  <case: CaseExp> => vec![case],
  <mut cases: CaseDecls> "," <case: CaseExp> => {
    cases.push(case);
    cases
  }
}

Bindings: Vec<(String, Exp<Span1>)> = {
  <binding: BindExp> "=" <exp: Exp> => vec![(binding, exp)],
  <mut bindings: Bindings> "," <binding: BindExp> "=" <exp: Exp> => {
    bindings.push((binding, exp));
    bindings
  }
}

TypeExp: (String, Vec<String>) = {
  <id: Id> "(" <ids: Comma<Id>> ")" => (id, ids),
  <id: Id> => (id, vec![])
}

// excuse the hard coding of these values 
// I originally had all primitives as one non-terminal, but the parser kept confusing
// a match condition as that terminal
// having a case hardcoded with each non-terminal prevented that from happening
CaseExp: (SnakeType, Vec<String>, Exp<Span1>) = {
  "case" <type_match: TypeExp> "=>" <exp: Exp> => (SnakeType::Custom(type_match.0), type_match.1, exp),
  "case Num" "(" <id: Id> ")" "=>" <exp: Exp> => (SnakeType::Num, vec![id], exp),
  "case Func" "(" <id: Id> ")" "=>" <exp: Exp> => (SnakeType::Func, vec![id], exp),
  "case Bool" "(" <id: Id> ")" "=>" <exp: Exp> => (SnakeType::Bool, vec![id], exp),
  "case Array" "(" <id: Id> ")" "=>" <exp: Exp> => (SnakeType::Array, vec![id], exp)
}


BindExp: String = Id;

Num: i64 = <s:r"[+-]?[0-9]+"> => i64::from_str(s).unwrap();
Id: String = <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => String::from(s);
Bool: bool = {
  "true" => true,
  "false" => false,
}

